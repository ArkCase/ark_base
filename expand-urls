#!/usr/bin/env python3

import os
import re
import sys
import urllib.parse

#
# This is the prefix that will be required of all envvars to be processed
#
PREFIX = "ARKCASE_"
PREFIX_ENVVAR = "EXPAND_URLS_PREFIX"

#
# This is the suffix that will be required of all envvars to be processed
#
SUFFIX = "_URL"
SUFFIX_ENVVAR = "EXPAND_URLS_SUFFIX"

SCHEME_PORTS = {
	"ftp" : 21,
	"ftps" : 990,
	"gopher" : 70,
	"http" : 80,
	"https" : 443,
	"ldap" : 389,
	"ldaps" : 636,
	"imap" : 143,
	"imaps" : 993,
	"pop" : 110,
	"pops" : 995,
	"smtp" : 25,
	"smtps" : 465,
	"ssh" : 22,
	"sftp" : 22,
	"telnet" : 23,
	"nfs" : 2049,
	"nntp" : 119,
}

def resolve_port_from_scheme(scheme):
	if (scheme) and (scheme in SCHEME_PORTS):
		return int(SCHEME_PORTS[scheme])
	return None

def assign_value(value, default=None):

	# Allow empty values
	if (value != None) and (not value):
		return value

	# If a non-empty value is given, then make sure
	# it's valid as an environment variable name
	if re.match("^[a-zA-Z_][a-zA-Z0-9_]*$", value):
		return value

	# If it's not valid, use the default
	return default

if len(sys.argv) > 1:
	# If the prefix is given as a parameter, try to use it
	PREFIX = assign_value(sys.argv[1], PREFIX)
else:
	try:
		PREFIX = assign_value(os.environ[PREFIX_ENVVAR], PREFIX)
	except KeyError:
		pass

if len(sys.argv) > 2:
	# If the suffix is given as a parameter, try to use it
	SUFFIX = assign_value(sys.argv[2], SUFFIX)
else:
	try:
		SUFFIX = assign_value(os.environ[SUFFIX_ENVVAR], SUFFIX)
	except KeyError:
		pass

#
# Make sure the prefix ends with an underscore
#
if PREFIX and (not PREFIX.endswith("_")):
	PREFIX = f"{PREFIX}_"

#
# Make sure the suffix starts with an underscore
#
if SUFFIX and (not SUFFIX.startswith("_")):
	SUFFIX = f"_{SUFFIX}"

#
# This map links names of fields to the suffixes that will be applied
# when rendering the environment variables
#
parts = {
	"scheme" : "scheme",
	"path" : "path",
	"hostname" : "host",
	"port" : "port",
	"query" : "query",
	"fragment" : "fragment",
}

#
# This tiny function will parse out the URL into
# its parts, but only if the variable name matches
# the pattern ${PREFIX}_*_URL
#
def parse_url(name, value):
	if name.startswith(PREFIX) and name.endswith(SUFFIX):
		return urllib.parse.urlparse(value)
	return None

#
# Ok... now iterate over all envvars, and process
# them all, knowing that the parse_url() function
# will only process the ones we're interested in
#
for name, value in os.environ.items():
	url = parse_url(name, value)
	if not url:
		continue

	for field, suffix in parts.items():
		partValue = ""

		if hasattr(url, field):
			v = getattr(url, field)
			if v:
				partValue = v

		#
		# Special case: if there's no port, compute it
		# from the scheme (if there's a scheme)
		#
		if (not partValue) and (field == "port"):
			partValue = resolve_port_from_scheme(url.scheme)

		if (not partValue):
			partValue = ""

		#
		# Spit out stuff that can be eval'd by the shell
		#
		partValue = str(partValue).replace("'", "'\\''")
		print(f"export {name}_{suffix.upper()}='{partValue}';")
