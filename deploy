#!/bin/bash
set -euo pipefail

[ -v BASE_DIR ] || BASE_DIR="/app"
[ -v INIT_DIR ] || INIT_DIR="${BASE_DIR}/init"
[ -v FORCE_HASHES ] || FORCE_HASHES="false"
[ -v DEPL_URL ] || DEPL_URL="http://app-deploy"

case "${FORCE_HASHES,,}" in
	true | t | yes | y | 1 | enabled | enable | en | on ) FORCE_HASHES="true" ;;
	* ) FORCE_HASHES="false" ;;
esac

# Make sure we run cleanup on exit
trap cleanup EXIT

say() {
	echo -e "$(date -u -Ins): ${@}"
}

fail() {
	say "${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

cleanup() {
	[ -v TARGET_TMP_DIR ] && [ -n "${TARGET_TMP_DIR}" ] && [ -d "${TARGET_TMP_DIR}" ] && rm -rf "${TARGET_TMP_DIR}" &>/dev/null
}

usage() {
	{
		echo -e "usage: ${BASH_SOURCE:-${0}} operation artifact targetDir"
		echo -e ""
		echo -e "    operation  => copy, extract, or extractdir"
		echo -e "    artifact   => path of the artifact to deploy (from DEPL_URL)"
		echo -e "    targetDir  => the directory into which to deploy"
		echo -e ""
		echo -e "    Operations:"
		echo -e "        copy       : copy the file verbatim into targetDir"
		echo -e "        extract    : unzip the file into targetDir (unzip -o -d ...)"
		echo -e "        extractDir : like extract, but create a subdirectory with"
		echo -e "                     the basename of the file, minus the extension"
	} 1>&2
	exit 1
}

[ ${#} -eq 3 ] || usage

OPERATION="${1,,}"
case "${OPERATION,,}" in
	copy | extract | extractdir | extract-dir ) OPERATION="${OPERATION,,}" ;;
	* ) fail "Invalid operation [${OPERATION}]" ;;
esac

ARTIFACT="${2}"

[[ "${ARTIFACT}" =~ [^/]$ ]] || fail "The artifact name may not end in a slash: [${ARTIFACT}]"

# Sanitize the artifact name (single slashes, remove leading slash)
ARTIFACT="$(echo -n "${ARTIFACT}" | sed -e 's;/+;/;g' -e 's;^/;;g')"
ARTIFACT_NAME="${ARTIFACT##*/}"

TARGET_DIR="${3}"
[ -e "${TARGET_DIR}" ] || fail "The target directory [${TARGET_DIR}] does not exist"
[ -d "${TARGET_DIR}" ] || fail "The target path [${TARGET_DIR}] is not a directory"
[ -r "${TARGET_DIR}" ] || fail "The target path [${TARGET_DIR}] is not readable"
[ -w "${TARGET_DIR}" ] || fail "The target path [${TARGET_DIR}] is not writable"
[ -x "${TARGET_DIR}" ] || fail "The target path [${TARGET_DIR}] is not executable"
TARGET_DIR="$(readlink -f "${TARGET_DIR}")"

TARGET_TMP_DIR="${TARGET_DIR}/.deploy.$(uuidgen)"
mkdir -p "${TARGET_TMP_DIR}" || fail "Failed to create the temporary work directory"
TARGET_TMP_FILE="${TARGET_TMP_DIR}/${ARTIFACT_NAME}"

# Check for artifact availability
SOURCE_URL="${DEPL_URL}/${ARTIFACT}"
HTTP_CODE="$(curl -kL -s --head -o /dev/null -w "%{http_code}" "${SOURCE_URL}")"
[ ${HTTP_CODE} -lt 400 ] || fail "The artifact [${ARTIFACT}] is not available for deployment (HTTP CODE = ${HTTP_CODE})"

# The artifact is there, so pull it into the destination
curl -kL --fail -s -o "${TARGET_TMP_FILE}" "${SOURCE_URL}"

# Same with the version and the checksum, but it's OK if these aren't there b/c
# we can come up with defaults

NEW_VER="$(curl -kL -s --fail "${DEPL_URL}/${ARTIFACT}.ver" 2>/dev/null || true)"
[ -n "${NEW_VER}" ] || NEW_VER="(unknown)"

# By default, no checksum...
SUM=""

# If we're not forcing a local hash computation, we try to download the cached value
${FORCE_HASHES} || SUM="$(curl -kL -s --fail "${DEPL_URL}/${ARTIFACT}.sum" 2>/dev/null || true)"

# If the sum is invalid, or we're requesting local checksum computation, we do just that
if [[ ! "${SUM,,}" =~ ^[0-9a-f]{64}$ ]] ; then
	${FORCE_HASHES} || say "Failed to find the cached checksum for [${ARTIFACT}], or its contents are invalid. Computing it directly..."
	read SUM REST < <(sha256sum "${TARGET_TMP_FILE}")
	[[ "${SUM,,}" =~ ^[0-9a-f]{64}$ ]] || fail "Failed to compute the sha256 checksum for [${ARTIFACT}]"
fi
SUM="${SUM,,}"

# This is the file track marker where we'll track the deployment status
MARKER_FILE="${TARGET_DIR}/.version"
if [ -e "${MARKER_FILE}" ] ; then
	OLD_DATE=""
	OLD_ARTIFACT=""
	OLD_VER=""
	OLD_SUM="<none>"
	EXISTING_LOADED="false"

	if [ -e "${MARKER_FILE}" ] ; then
		# We explicitly don't call sort b/c we want to get the last record on the list,
		# regardless of its contents
		REST=""
		IFS="|" read OLD_DATE OLD_VER OLD_SUM OLD_ARTIFACT < <(sed -e '/^\s*#.*$/d' -e '/^\s*$/d' < "${MARKER_FILE}" | egrep "\|[0-9a-fA-F]{64}\|${ARTIFACT}$" | tail -1)
		[ -n "${OLD_SUM}" ] && EXISTING_LOADED="true"
	fi

	if "${EXISTING_LOADED}" ; then
		if [ "${SUM,,}" == "${OLD_SUM,,}" ] ; then
			say "The artifact [${ARTIFACT}] appears to already be deployed into [${TARGET_DIR}] since ${OLD_DATE} (version = ${OLD_VER}, verified by checksum)."
			exit 0
		fi
		say "File content change detected for [${ARTIFACT}] through file checksum:\n\tEXISTING: [${OLD_VER} = ${OLD_SUM}]\n\tINCOMING: [${NEW_VER} = ${SUM}]"
	else
		say "Couldn't find a prior installation record for [${ARTIFACT}], deploying the file:\n\tINCOMING: [${NEW_VER} = ${SUM}]"
	fi
else
	say "Version tracking hasn't yet begun for ${TARGET_DIR} (the marker file [${MARKER_FILE}] is missing)"
fi

case "${OPERATION,,}" in
	extract )
		unzip -o -d "${TARGET_DIR}" "${TARGET_TMP_FILE}"
		;;

	extractdir | extract-dir )
		BASENAME="${ARTIFACT_NAME%.*}"
		mkdir -p "${TARGET_DIR}/${BASENAME}"
		unzip -o -d "${TARGET_DIR}/${BASENAME}" "${TARGET_TMP_FILE}"
		;;

	copy )
		mv -vf "${TARGET_TMP_FILE}" "${TARGET_DIR}/${ARTIFACT_NAME}"
		;;

	* )
		fail "Unrecognized operation requested: [${OPERATION}]"
		;;
esac

# Add the marker record for this version
echo -e "$(date -u -Ins)|${NEW_VER}|${SUM,,}|${ARTIFACT}" >> "${MARKER_FILE}"
exit 0
